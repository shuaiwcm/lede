
name: OpenWrt-CI

on:
  repository_dispatch:
  workflow_dispatch:

permissions:
  contents: read

jobs:

  build_openwrt:

    name: Build OpenWrt Firmware

    runs-on: ubuntu-22.04

    steps:

  # Step 1: Checkout repository
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
          
  # Step 2: 清理空间
      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理 Docker 映像以释放空间
          docker system prune -af
          
          # 删除不必要的软件包，优化空间
          sudo apt-get update
          sudo apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo apt-get -y autoremove --purge
          sudo apt-get clean
          
          # 为 OpenWrt 安装必要的构建依赖项
          sudo apt-get install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5

          # 继续之前检查磁盘空间
          df -h
          du -h ./ --max-depth=1

  # Step 3: 更新 OpenWrt 信息源
      - name: Update feeds
        run: |
          echo 'src-git OpenClash https://github.com/vernesong/OpenClash.git;master' >>feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a


  # Step 4: 生成配置文件
  
      - name: Generate configuration file
        run: |
          rm -f ./.config
          touch ./.config

          # 添加自定义配置
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          cat >> .config <<EOF
          CONFIG_TARGET_ipq806x=y
          CONFIG_TARGET_ipq806x_generic=y
          CONFIG_TARGET_ipq806x_generic_DEVICE_linksys_ea8500=y
          CONFIG_PACKAGE_6in4=y
          CONFIG_PACKAGE_bash=y
          CONFIG_PACKAGE_coreutils=y
          CONFIG_PACKAGE_coreutils-nohup=y
          CONFIG_PACKAGE_ipv6helper=y
          CONFIG_PACKAGE_kmod-iptunnel=y
          CONFIG_PACKAGE_kmod-iptunnel4=y
          # CONFIG_PACKAGE_kmod-nf-conntrack-netlink is not set
          CONFIG_PACKAGE_kmod-sit=y
          CONFIG_PACKAGE_libcap=y
          CONFIG_PACKAGE_libcap-bin=y
          CONFIG_PACKAGE_libcap-bin-capsh-shell="/bin/sh"
          CONFIG_PACKAGE_libgmp=y
          CONFIG_PACKAGE_libminiupnpc=y
          CONFIG_PACKAGE_libnatpmp=y
          CONFIG_PACKAGE_libreadline=y
          CONFIG_PACKAGE_libruby=y
          CONFIG_PACKAGE_libstdcpp=y
          CONFIG_PACKAGE_libyaml=y
          # CONFIG_PACKAGE_luci-app-arpbind is not set
          # CONFIG_PACKAGE_luci-app-autoreboot is not set
          # CONFIG_PACKAGE_luci-app-ddns is not set
          # CONFIG_PACKAGE_luci-app-filetransfer is not set
          CONFIG_PACKAGE_luci-app-lucky=y
          # CONFIG_PACKAGE_luci-app-nlbwmon is not set
          CONFIG_PACKAGE_luci-app-openclash=y
          # CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-ng is not set
          # CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-webui is not set
          # CONFIG_PACKAGE_luci-app-upnp is not set
          # CONFIG_PACKAGE_luci-app-vlmcsd is not set
          # CONFIG_PACKAGE_luci-app-vsftpd is not set
          CONFIG_PACKAGE_luci-app-zerotier=y
          CONFIG_PACKAGE_luci-i18n-lucky-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-zerotier-zh-cn=y
          # CONFIG_PACKAGE_luci-lib-fs is not set
          CONFIG_PACKAGE_lucky=y
          # CONFIG_PACKAGE_miniupnpd is not set
          # CONFIG_PACKAGE_nlbwmon is not set
          CONFIG_PACKAGE_ruby=y
          CONFIG_PACKAGE_ruby-bigdecimal=y
          CONFIG_PACKAGE_ruby-date=y
          CONFIG_PACKAGE_ruby-digest=y
          CONFIG_PACKAGE_ruby-enc=y
          CONFIG_PACKAGE_ruby-forwardable=y
          CONFIG_PACKAGE_ruby-pstore=y
          CONFIG_PACKAGE_ruby-psych=y
          CONFIG_PACKAGE_ruby-stringio=y
          CONFIG_PACKAGE_ruby-strscan=y
          CONFIG_PACKAGE_ruby-yaml=y
          CONFIG_PACKAGE_unzip=y
          # CONFIG_PACKAGE_vlmcsd is not set
          # CONFIG_PACKAGE_vsftpd-alt is not set
          CONFIG_PACKAGE_zerotier=y
          # CONFIG_PACKAGE_kmod-inet-diag is not set
          EOF

          # 确保 .config 文件格式正确，并生成默认配置
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

          
  # Step 5: 下载必要的文件
      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          # Clean up any small files
          rm -rf $(find ./dl/ -size -1024c)
          df -h

          
  # Step 6: 编译固件
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Disk space usage:"
          echo "======================="
          df -h
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

          
  # Step 7: 准备和组织构建工件
      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/


  # Step 8: 上传构建工件（构建信息、软件包和固件）
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

  # Step 9: 上传发布资产（仅当发布触发时）
      - name: Get current date
        id: date
        run: |
          # 获取当前日期（格式：YYYY-MM-DD）
          current_date=$(date +'%Y-%m-%d')
          echo "current_date=${current_date}" >> $GITHUB_ENV

      - name: Upload release asset
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ steps.date.outputs.current_date }}   # 使用动态生成的日期作为标签
          file_glob: true
